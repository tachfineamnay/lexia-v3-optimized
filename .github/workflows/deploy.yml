name: 🚀 Deploy to Coolify

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  # Test job
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org/'

      - name: 📥 Install backend dependencies
        working-directory: ./backend
        run: |
          rm -f package-lock.json
          npm config set registry https://registry.npmjs.org/
          npm install --no-optional

      - name: 📥 Install frontend dependencies
        working-directory: ./frontend
        run: |
          rm -rf package-lock.json node_modules
          npm config set registry https://registry.npmjs.org/
          npm install

      - name: 🏗️ Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          CI: true
          VITE_API_URL: http://localhost:5000

  # Build job
  build:
    name: 🏗️ Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: lexia-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: lexia-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_URL=http://localhost:5000

  # Deploy job
  deploy:
    name: 🚀 Deploy to Coolify
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy MongoDB to Coolify
        run: |
          curl -X POST "http://168.231.86.146:8000/api/v1/deploy?uuid=k4wwoosgkc4gsk4480gc8ooc&force=false" \
            -H "Content-Type: application/json" \
            -d '{"ref": "${{ github.ref }}", "commit": "${{ github.sha }}"}'

      - name: 🚀 Deploy Backend to Coolify
        run: |
          curl -X POST "http://168.231.86.146:8000/api/v1/deploy?uuid=dsgk000gcgg4wswogc4ogg8c&force=false" \
            -H "Content-Type: application/json" \
            -d '{"ref": "${{ github.ref }}", "commit": "${{ github.sha }}"}'

      - name: 🚀 Deploy Frontend to Coolify
        run: |
          curl -X POST "http://168.231.86.146:8000/api/v1/deploy?uuid=v08wwkk04kw8o4osk0okocso&force=false" \
            -H "Content-Type: application/json" \
            -d '{"ref": "${{ github.ref }}", "commit": "${{ github.sha }}"}'

      - name: ⏳ Wait for deployment
        run: sleep 120 # Wait for all deployments to start

  # Security scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'