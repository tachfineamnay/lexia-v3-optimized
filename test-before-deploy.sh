#!/bin/bash
# Script de test avant d√©ploiement pour √©viter les erreurs sur le VPS

echo "üîç Test pr√©-d√©ploiement LexiaV3..."

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Compteur d'erreurs
ERRORS=0

# 1. V√©rifier la syntaxe des Dockerfiles
echo -e "\nüìã V√©rification des Dockerfiles..."
if grep -q "^+" backend/Dockerfile; then
    echo -e "${RED}‚ùå Erreur: backend/Dockerfile contient des lignes invalides commen√ßant par +${NC}"
    ((ERRORS++))
else
    echo -e "${GREEN}‚úÖ backend/Dockerfile est valide${NC}"
fi

if grep -q "^+" frontend/Dockerfile 2>/dev/null; then
    echo -e "${RED}‚ùå Erreur: frontend/Dockerfile contient des lignes invalides commen√ßant par +${NC}"
    ((ERRORS++))
else
    echo -e "${GREEN}‚úÖ frontend/Dockerfile est valide${NC}"
fi

# 2. V√©rifier les imports de modules
echo -e "\nüìã V√©rification des imports..."
cd backend
MISSING_MODULES=()

# V√©rifier si tous les mod√®les import√©s existent
for file in routes/*.js; do
    # Extraire les imports de mod√®les
    IMPORTS=$(grep -E "require\(['\"]\.\.\/models\/" "$file" 2>/dev/null | sed -E "s/.*require\(['\"]\.\.\/models\/([^'\"]+)['\"].*/\1/")
    for import in $IMPORTS; do
        MODEL_FILE="models/${import}.js"
        if [ ! -f "$MODEL_FILE" ]; then
            echo -e "${RED}‚ùå Erreur: $file importe '$MODEL_FILE' qui n'existe pas${NC}"
            MISSING_MODULES+=("$MODEL_FILE")
            ((ERRORS++))
        fi
    done
done

# 3. V√©rifier les d√©pendances npm
echo -e "\nüìã V√©rification des d√©pendances npm..."
cd ../backend

# V√©rifier si package.json est valide
if ! node -e "JSON.parse(require('fs').readFileSync('package.json'))" 2>/dev/null; then
    echo -e "${RED}‚ùå Erreur: backend/package.json n'est pas un JSON valide${NC}"
    ((ERRORS++))
else
    echo -e "${GREEN}‚úÖ backend/package.json est valide${NC}"
fi

cd ../frontend
if ! node -e "JSON.parse(require('fs').readFileSync('package.json'))" 2>/dev/null; then
    echo -e "${RED}‚ùå Erreur: frontend/package.json n'est pas un JSON valide${NC}"
    ((ERRORS++))
else
    echo -e "${GREEN}‚úÖ frontend/package.json est valide${NC}"
fi

cd ..

# 4. V√©rifier docker-compose.yml
echo -e "\nüìã V√©rification de docker-compose.yml..."
if command -v docker-compose &> /dev/null; then
    if docker-compose config > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ docker-compose.yml est valide${NC}"
    else
        echo -e "${RED}‚ùå Erreur: docker-compose.yml contient des erreurs${NC}"
        docker-compose config
        ((ERRORS++))
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  docker-compose non install√©, impossible de v√©rifier docker-compose.yml${NC}"
fi

# 5. V√©rifier les variables d'environnement requises
echo -e "\nüìã V√©rification du fichier .env..."
if [ ! -f ".env" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Fichier .env non trouv√© (sera n√©cessaire sur le VPS)${NC}"
    echo -e "Variables requises:"
    echo -e "  - JWT_SECRET"
    echo -e "  - REFRESH_TOKEN_SECRET"
    echo -e "  - MONGODB_URI"
else
    # V√©rifier les variables requises
    REQUIRED_VARS=("JWT_SECRET" "REFRESH_TOKEN_SECRET" "MONGODB_URI")
    for var in "${REQUIRED_VARS[@]}"; do
        if ! grep -q "^$var=" .env; then
            echo -e "${RED}‚ùå Erreur: Variable $var manquante dans .env${NC}"
            ((ERRORS++))
        fi
    done
fi

# 6. Test de build Docker local (optionnel)
if [ "$1" == "--with-docker" ]; then
    echo -e "\nüìã Test de build Docker..."
    if docker build -t test-backend backend/ > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Build backend r√©ussi${NC}"
        docker rmi test-backend > /dev/null 2>&1
    else
        echo -e "${RED}‚ùå Erreur: Build backend √©chou√©${NC}"
        ((ERRORS++))
    fi
    
    if docker build -t test-frontend frontend/ > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Build frontend r√©ussi${NC}"
        docker rmi test-frontend > /dev/null 2>&1
    else
        echo -e "${RED}‚ùå Erreur: Build frontend √©chou√©${NC}"
        ((ERRORS++))
    fi
fi

# R√©sum√©
echo -e "\n==============================================="
if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Tous les tests sont pass√©s!${NC}"
    echo -e "${GREEN}L'application est pr√™te √† √™tre d√©ploy√©e.${NC}"
    exit 0
else
    echo -e "${RED}‚ùå $ERRORS erreur(s) d√©tect√©e(s)!${NC}"
    echo -e "${RED}Corrigez ces erreurs avant de d√©ployer.${NC}"
    exit 1
fi 